name: Flutter CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'  # 只有带有特定版本格式（如v1.0）的标签才会触发此工作流
  pull_request:
    branches: [ main ]  # 只有针对 main 分支的 PR 才会触发此工作流

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      flutter_version: '3.27.1'
    steps:
      - name: Determine Flutter version
        run: echo "::set-output name=flutter_version::3.27.1"  # 设置 Flutter 版本，以便后续任务使用

  build_and_test:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [apk, ios]
        include:
          - platform: apk
            os: ubuntu-latest
          - platform: ios
            os: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # 检出仓库代码
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ needs.prepare.outputs.flutter_version }}  # 使用之前确定的 Flutter 版本
      - name: Install dependencies
        run: flutter pub get  # 安装 Flutter 项目依赖
      - name: Run tests
        run: flutter test  # 运行所有测试
      - name: Build
        run: |
          if [ "${{ matrix.platform }}" == "apk" ]; then
            flutter build apk --release  # 构建 Android APK
          else
            flutter build ios --release --no-codesign  # 构建 iOS 应用，无需代码签名
        shell: bash
      - name: Archive Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform }}-release
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/ios/iphoneos/*.app

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: apk-release
      - name: Deploy
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Deploying version $VERSION to production"
          # 这里可以添加具体的部署命令，例如上传到应用商店或服务器
